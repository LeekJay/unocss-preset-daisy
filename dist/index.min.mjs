import s from"postcss";import e from"autoprefixer";import{parse as t}from"postcss-js";import{tokenize as i}from"parsel-js";import r from"lodash";import o from"daisyui/src/theming/index.js";import a from"daisyui/dist/utilities.js";import n from"daisyui/dist/base.js";import m from"daisyui/dist/unstyled.js";import l from"daisyui/dist/styled.js";import p from"daisyui/dist/utilities-unstyled.js";import c from"daisyui/dist/utilities-styled.js";import d from"daisyui/src/theming/themes.js";import u from"daisyui/src/theming/functions.js";import y from"daisyui/src/lib/utility-classes.js";const f=s(e),h=s=>f.process(s,{parser:t}),j=s=>s.replaceAll("--tw-","--un-"),g={styled:!0,themes:!1,base:!0,utils:!0,rtl:!1,darkTheme:"dark"},b=s=>{const e=[],t=s=>{if("atrule"===s.type)for(const e of s.nodes)t(e);else e.push(s)};return t(s),e},S=(s={})=>{var e;s=Object.assign(Object.assign({},g),s);const t=new Map,f=[],S=[],k=[s.styled?l:m];s.utils&&k.push(a,p,c);for(const s of k.flatMap((s=>h(s).root.nodes))){const r="atrule"===s.type;if(r&&"keyframes"===s.name){f.push(String(s));continue}if(r&&"supports"===s.name){S.push(String(s));continue}if(r&&"supports"!==s.name&&"keyframes"===s.name){console.log(s);continue}const o=b(s)[0],a=o.selectors[0],n=i(a),m=n[0];let l="";"class"===m.type?l=a.startsWith(".link-")?"link":a.startsWith(".modal-open")?"modal":m.name:"pseudo-class"===m.type&&"where"===m.name?l=i(m.argument)[0].name:['[dir="rtl"]',":root"].includes(m.content)&&(l=n[1].content.includes(".modal-open")?"modal":n[2].name),t.set(l,(null!==(e=t.get(l))&&void 0!==e?e:"")+String(o)+"\n")}const O=[{getCSS:()=>f.join("\n"),layer:"daisy-keyframes"},{getCSS:()=>S.join("\n"),layer:"daisy-supports"}];return s.base&&O.unshift({getCSS:()=>j(h(n).css),layer:"daisy-base"}),u.injectThemes((s=>{O.push({getCSS:()=>h(s).css,layer:"daisy-themes"})}),(e=>"daisyui.themes"===e?s.themes:"daisyui.darkTheme"===e?s.darkTheme:void 0),d),{name:"unocss-preset-daisy",preflights:O,theme:Object.assign({colors:Object.assign(Object.assign({},Object.fromEntries(Object.entries(o).filter((([s])=>!["transparent","current"].includes(s)&&!s.startsWith("base"))).map((([s,e])=>[r.camelCase(s),e])))),{base:Object.fromEntries(Object.entries(o).filter((([s])=>s.startsWith("base"))).map((([s,e])=>[s.replace("base-",""),e])))})},y),rules:[...t].map((([s,e])=>[new RegExp(`^${s}$`),()=>j(e),{layer:s.startsWith("checkbox-")?"daisy-components-post":"daisy-components"}]))}};export{S as presetDaisy};
